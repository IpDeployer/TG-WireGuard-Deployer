name: Send WireGuard Config to Telegram

on:
  schedule:
    - cron: '0 0 * * *' # Daily at midnight
  workflow_dispatch:

jobs:
  send_wireguard_config:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install python-telegram-bot==13.7 urllib3 six

      - name: Generate and Send WireGuard Config
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_CHANNEL_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          python - << EOF
          import os
          import json
          import base64
          import urllib.parse
          from telegram import Bot
          from telegram.error import TelegramError

          def base64_encode(value):
              """Encodes a string into Base64."""
              return base64.urlsafe_b64encode(value.encode()).decode()

          def generate_wireguard_config():
              config = {
                  "local_address": [
                      "172.16.0.2/32",
                      "2606:4700:110:8a6d:21bd:c9c1:a8:747a/128"
                  ],
                  "mtu": 1280,
                  "peer_public_key": "bmXOC+F1FxEMF9dyiK2H5/1SUtzH0JuVo51h2wPfgyo=",
                  "private_key": "IKRBbz7Ug/QW7ueR7jy+6awYusXlXeIy4RQliP1k5ko=",
                  "reserved": [149, 94, 161],
                  "server": "engage.cloudflareclient.com",
                  "server_port": 2408
              }

              # Base64 encode the private key only
              private_key_b64 = base64_encode(config['private_key'])

              # Escape characters for JSON compatibility
              config['private_key'] = private_key_b64
              config_json = json.dumps(config, indent=2, ensure_ascii=False).replace("=", r"\u003d")

              # Encode URL components
              private_key_encoded = urllib.parse.quote(private_key_b64)
              local_address_encoded = urllib.parse.quote(','.join(config['local_address']))  # Keep as regular strings
              reserved_encoded = urllib.parse.quote(','.join(map(str, config['reserved'])))
              public_key_encoded = urllib.parse.quote(config['peer_public_key'])

              # Construct URI
              config_url = (
                  f"wireguard://{private_key_encoded}"
                  f"@{config['server']}:{config['server_port']}?"
                  f"address={local_address_encoded}"
                  f"&reserved={reserved_encoded}"
                  f"&publickey={public_key_encoded}"
                  f"&mtu={config['mtu']}#Warp"
              )

              return config_json, config_url

          config_json, config_url = generate_wireguard_config()

          bot = Bot(token=os.environ['TELEGRAM_BOT_TOKEN'])
          try:
              chat_id = os.environ['TELEGRAM_CHANNEL_ID']
              
              # Combine JSON config and URI into the exact required message format
              message = f"{config_json}\n\n{config_url}"
              bot.send_message(chat_id=chat_id, text=message)
              
              print("Message sent successfully to Telegram.")
          except TelegramError as e:
              print(f"An error occurred while sending the message: {e}")
          EOF